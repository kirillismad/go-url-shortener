// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: links.sql

package sqlc

import (
	"context"
)

const createLink = `-- name: CreateLink :one
INSERT INTO "links" ("short_id", "href") 
VALUES ($1, $2) 
RETURNING id, short_id, href, created_at, usage_count, usage_at
`

type CreateLinkParams struct {
	ShortID string
	Href    string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.ShortID, arg.Href)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortID,
		&i.Href,
		&i.CreatedAt,
		&i.UsageCount,
		&i.UsageAt,
	)
	return i, err
}

const getLinkByHref = `-- name: GetLinkByHref :one
SELECT id, short_id, href, created_at, usage_count, usage_at FROM "links" WHERE "href" = $1
`

func (q *Queries) GetLinkByHref(ctx context.Context, href string) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByHref, href)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortID,
		&i.Href,
		&i.CreatedAt,
		&i.UsageCount,
		&i.UsageAt,
	)
	return i, err
}

const getLinkByShortID = `-- name: GetLinkByShortID :one
SELECT id, short_id, href, created_at, usage_count, usage_at FROM "links" WHERE "short_id" = $1
`

func (q *Queries) GetLinkByShortID(ctx context.Context, shortID string) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByShortID, shortID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortID,
		&i.Href,
		&i.CreatedAt,
		&i.UsageCount,
		&i.UsageAt,
	)
	return i, err
}

const isLinkExistByShortID = `-- name: IsLinkExistByShortID :one
SELECT EXISTS(SELECT 1 FROM "links" WHERE "short_id" = $1)
`

func (q *Queries) IsLinkExistByShortID(ctx context.Context, shortID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isLinkExistByShortID, shortID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateLinkUsageInfo = `-- name: UpdateLinkUsageInfo :exec
UPDATE "links" 
SET "usage_count" = "usage_count" + 1, "usage_at" = NOW()
WHERE "id" = $1
`

func (q *Queries) UpdateLinkUsageInfo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateLinkUsageInfo, id)
	return err
}
